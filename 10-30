# 알파벳 찾기
# S = input()
# A = 'abcdefghijklmnopqrstuvwxyz'
#
# for i in A:
#     if i in S:
#         print(S.index(i), end = ' ')
#     else:
#         print(-1, end = ' ')

# 상수
# A, B = input().split()
# A = int(A[::-1])
# B = int(B[::-1])
# if A > B:
#     print(A)
# else:
#     print(B)

# 다이얼
# Number = ['ABC', 'DEF','GHI', 'JKL', 'MNO', 'PQRS', 'TUV', 'WXYZ']
# a = input()
#
# time = 0
# for i in a:
#     for j in Number:
#         if i in j:
#             time += Number.index(j) + 3
# print(time)

#크로아티아 알파벳
# string = input()
# cnt = len(string)             #크로아티아 알파벳의 개수
# croatia = ['c=','c-','dz=','d-','lj','nj','s=','z=']    #크로아티아 알파벳중 기존 알파벳으로 표기 못하는 애들
#
# for i in croatia:
#     cnt -= string.count(i)#cnt = cnt - string.cout(i)
#
# print(cnt)

# 그룹 단어 체커
n = int(input())        # 테스트 케이스 개수
cnt = n                 # 그룹단어의 개수
for _ in range(n):
    string = input()    # 입력 받은 문자열
    # TODO: 입력받은 string이 그룹단어일 경우 cnt를 증가시킨다.
    # 그룹 단어: 연속된 문자 또는 단일 문자로 이루어진 단어
    # 같은 단어가 떨어져서 나올 경우 그룹단어가 아니다.
    # abcabc
    for i in range(len(string)-1):      # 인접한 두개의 문자를 보기 때문에 범위를 1 줄여준다.
        if string[i] == string[i + 1]:  # 인접한 두개의 문자가 서로 같을 경우 그룹단어이므로 건너뛴다.
            continue
        elif string[i] in string[i + 1:]:# 현재 바라보는 문자가 이후범위에 있을 경우 그룹단어가 아니므로
            cnt -= 1                     # 그룹단어의 개수를 줄여주고 이후 문자를 볼 필요가 없어졌기 때문에
            break                        # 반복을 중단한다.

print(cnt)
