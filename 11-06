# a = "Hello Python"
# print(a.split())

# a = "Hello Python"
# print(a.upper())    #대문자로 변환
# a = "Hello Python"
# print(a.lower())    #소문자로 변환

# a = "....app..le...."
# 문장에서 연속되는 해당 문자를 제거 후 반환
# print('|',a.lstrip('.'),'|', sep="")
# print('|',a.strip('.'),'|', sep="")
# print('|',a.rstrip('.'),'|', sep="")

# a = [4,1,2,3]
# print(a[2])   #리스트 내 순서 지정
# print(a[1:2]) #리스트 내 범위 설정
# a = [4,1,3,2]
# b = [5,6,8]


# [ 리스트 ]
# a[1] = 5
# print(a[1])

# del a[3]
# print(a)

#리스트의 곱셈, 덧셈
# print(a+b) #출력값 => [4, 1, 3, 2, 5, 6, 8]
# print(b*3) #출력값 => [5, 6, 8, 5, 6, 8, 5, 6, 8]

# print(len(b))   #리스트 길이

# a = [4,1,2,3]
# a.append(5)
# print(a)
# a.reverse() #순서 반전
# print(a)
# a.insert(1,8)   #삽입(원하는 위치, 삽입할 대상)
# print(a)
# a.pop(2)    #추출
# print(a)
# a.sort(reverse = True)  #sort()오름차순 reaverse 넣어주면 내림차순
# print(a)
# print(a.count(2))   #리스트 내 해당 원소의 개수
# print(a.index(1))
# a.remove(2)
# print(a)
# a.extend([2,6])
# print(a)
# a.append([2,6])
# print(a)


#( 튜플 )
# t1 = (1,)
# t2 = (1,2,3)
# l1 = [1,2,3]
# t3 = tuple(l1)
# t4 = 1,2,3
# print(type(t1),type(t2),type(t3),type(t4)) #출력값 = <class 'tuple'>

# t1 = 1,2,3,4
# #삭제
# del t1[1]
# #수정
# t1[1] = 5

# t1 =1,2,3,4
# t2 = 4,5,8,6
#투플끼리의 덧셈
# print(t1+t2)
# # (1, 2, 3, 4, 5, 8, 6)
# print(t2 * 2)
# # (4, 5, 8, 6, 4, 5, 8, 6)
# print(t1[1])
# #(2)
# print(t2[1:])
# # (5, 8, 6)
# print(len(t2))
# # 4


# { 딕셔너리 }
# a = ["Hello"]
# b = ["Python"]
# d2 = dict(zip(a,b))
# print(d2, type(d2)) #출력값 => {"Hello" : "Python"},   class <'dict'>
# print(d2["Hello"])

# d1 = {"apple":"사과","banana":"바나나"}
# #추가
# d1["복숭아"] = "peach"
# #삭제
# del d1["banana"]
# #수정
# d1["apple"] = "수박"
# print(d1)

# d1 = {"A":"씨"}
# print(d1["A"])
# print(d1)
#딕셔너리의 수정
# d1["A"] = "디"
# print(d1)

#Key 값에 변할 수 있는 자료형을 사용할 경우
# d2 = {('a','b','c'): "숫자"}
# print(d2)

# d1 = {"A":1, "B":2, "C":3}

# k = d1.keys()
# v = d1.values()
# i = d1.items()
# print(f"k = {k}\n = {v}\n i = {i}")


# { 집합 }
# a = {}  #비어있는 딕셔너리
# print(type(a))
# # 비어있는 집합 = ?
# s = set()
# print(type(s))

#집합의 특징 1. 순서가 없다. 2. 중복된 값을 제거한다.
# string = "HELLO"
# print(set(string))
# s1 = {1,2,3,4}
# s2 = {3,4,5,6}
# 합집합 파이프 | (shift + \)
# print(s1 | s2)
# 차집합 -
# print(s1 - s2)
# 교집합 & (shift + 7)
# print(s1 & s2)
# 대칭 차집합(합집합 - 교집합) 캐럿^ (shift + 6)
# print(s1 ^ s2)

#자료형의 참과 거짓
# 기준 : 자료형의 값이 있을 경우 참, 없을 경우 거짓
# 정수의 참과 거짓


#행렬 덧셈
# n,m = input().split()   #'3 3' => ['3', '3']

# n = int(n)  #'3' =>3
# m = int(m)  #'3' =>3

# A = []
# B = []
# # A와 B 입력받기
# for _ in range(n):
#     x = input().split()         #'1 1 1' => ['1','1','1']
#     A.append(x)
# for _ in range(n):
#     x = input().split()
#     B.append(x)

# for x in range(n):
#     for y in range(m):
#         print(int(A[x][y]) + int(B[x][y]),end = ' ')
#     print()

# x = 0 ~ 2, y = 0 ~ 2
# int(A[x][y]) + int(B[x][y]) 반복
# A = [['1', '1', '1'],
#      ['2', '2', '2'],
#      ['0', '1', '0']]

# B = [['3', '3', '3'],
#      ['4', '4', '4'],
#      ['5', '5', '100']]

# C = [[4, 4, 4,],
#      [6, 6, 6,],
#      [5, 6, 100]]
